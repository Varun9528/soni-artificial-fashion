generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                       String            @id @default(dbgenerated("(uuid())")) @db.VarChar(36)
  email                    String            @unique(map: "email") @db.VarChar(255)
  password_hash            String            @db.VarChar(255)
  name                     String            @db.VarChar(255)
  phone                    String?           @db.VarChar(20)
  role                     users_role?       @default(customer)
  email_verified           Boolean?          @default(false)
  email_verification_token String?           @db.VarChar(255)
  password_reset_token     String?           @db.VarChar(255)
  password_reset_expires   DateTime?         @db.DateTime(0)
  mfa_enabled              Boolean?          @default(false)
  mfa_secret               String?           @db.VarChar(255)
  account_locked           Boolean?          @default(false)
  failed_login_attempts    Int?              @default(0)
  last_login               DateTime?         @db.DateTime(0)
  created_at               DateTime?         @default(now()) @db.DateTime(0)
  updated_at               DateTime?         @default(now()) @db.DateTime(0)
  deleted_at               DateTime?         @db.DateTime(0)
  artisans                 Artisan[]
  audit_logs               audit_logs[]
  carts                    carts[]
  coupon_usage             coupon_usage[]
  notifications            Notification[]
  orders                   Order[]
  product_reviews          product_reviews[]
  refresh_tokens           refresh_tokens[]
  returns                  returns[]
  user_addresses           user_addresses[]
  wishlists                wishlists[]

  @@index([created_at], map: "idx_created_at")
  @@index([email], map: "idx_email")
  @@index([role], map: "idx_role")
  @@map("users")
}

model Category {
  id               String     @id @default(cuid()) @db.VarChar(50)
  name_en          String     @db.VarChar(255)
  name_hi          String     @db.VarChar(255)
  description_en   String?    @db.Text
  description_hi   String?    @db.Text
  image            String?    @db.VarChar(500)
  parent_id        String?    @db.VarChar(50)
  display_order    Int?       @default(0)
  is_active        Boolean?   @default(true)
  created_at       DateTime?  @default(now()) @db.DateTime(0)
  updated_at       DateTime?  @default(now()) @db.DateTime(0)
  categories       Category?  @relation("categoriesTocategories", fields: [parent_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "categories_ibfk_1")
  other_categories Category[] @relation("categoriesTocategories")
  products         Product[]

  @@index([display_order], map: "idx_display_order")
  @@index([parent_id], map: "idx_parent_id")
  @@map("categories")
}

model Artisan {
  id               String    @id @db.VarChar(50)
  user_id          String?   @db.VarChar(36)
  name             String    @db.VarChar(255)
  bio_en           String?   @db.Text
  bio_hi           String?   @db.Text
  specialization   String?   @db.VarChar(255)
  location         String?   @db.VarChar(255)
  phone            String?   @db.VarChar(20)
  email            String?   @db.VarChar(255)
  avatar           String?   @db.VarChar(500)
  portfolio_images String?   @db.LongText
  social_links     String?   @db.LongText
  experience_years Int?
  rating           Decimal?  @default(0.00) @db.Decimal(3, 2)
  total_products   Int?      @default(0)
  is_verified      Boolean?  @default(false)
  is_active        Boolean?  @default(true)
  created_at       DateTime? @default(now()) @db.DateTime(0)
  updated_at       DateTime? @default(now()) @db.DateTime(0)
  users            User?     @relation(fields: [user_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "artisans_ibfk_1")
  products         Product[]

  @@index([is_active], map: "idx_is_active")
  @@index([rating], map: "idx_rating")
  @@index([user_id], map: "idx_user_id")
  @@map("artisans")
}

model Product {
  id                  String             @id @default(cuid()) @db.VarChar(50)
  slug                String             @unique(map: "slug") @db.VarChar(255)
  title_en            String             @db.VarChar(255)
  title_hi            String             @db.VarChar(255)
  description_en      String?            @db.Text
  description_hi      String?            @db.Text
  price               Decimal            @db.Decimal(10, 2)
  original_price      Decimal?           @db.Decimal(10, 2)
  discount_percentage Int?               @default(0)
  sku                 String?            @db.VarChar(100)
  stock               Int?               @default(0)
  min_stock_level     Int?               @default(5)
  weight              Decimal?           @db.Decimal(8, 2)
  dimensions          String?            @db.VarChar(255)
  material            String?            @db.VarChar(255)
  color               String?            @db.VarChar(100)
  category_id         String             @db.VarChar(50)
  artisan_id          String?            @db.VarChar(50)
  rating              Decimal?           @default(0.00) @db.Decimal(3, 2)
  review_count        Int?               @default(0)
  view_count          Int?               @default(0)
  sales_count         Int?               @default(0)
  tags                String?            @db.LongText
  featured            Boolean?           @default(false)
  best_seller         Boolean?           @default(false)
  trending            Boolean?           @default(false)
  new_arrival         Boolean?           @default(false)
  is_active           Boolean?           @default(true)
  meta_title          String?            @db.VarChar(255)
  meta_description    String?            @db.Text
  created_at          DateTime?          @default(now()) @db.DateTime(0)
  updated_at          DateTime?          @default(now()) @db.DateTime(0)
  carts               carts[]
  order_items         OrderItem[]
  product_images      ProductImage[]
  product_reviews     product_reviews[]
  product_variants    product_variants[]
  categories          Category           @relation(fields: [category_id], references: [id], onUpdate: Restrict, map: "products_ibfk_1")
  artisans            Artisan?           @relation(fields: [artisan_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "products_ibfk_2")
  wishlists           wishlists[]

  @@index([artisan_id], map: "idx_artisan_id")
  @@index([category_id], map: "idx_category_id")
  @@index([featured], map: "idx_featured")
  @@index([is_active], map: "idx_is_active")
  @@index([price], map: "idx_price")
  @@index([rating], map: "idx_rating")
  @@index([slug], map: "idx_slug")
  @@map("products")
}

model ProductImage {
  id            String    @id @default(dbgenerated("(uuid())")) @db.VarChar(36)
  product_id    String    @db.VarChar(50)
  image_url     String    @db.VarChar(500)
  alt_text      String?   @db.VarChar(255)
  display_order Int?      @default(0)
  is_primary    Boolean?  @default(false)
  created_at    DateTime? @default(now()) @db.DateTime(0)
  products      Product   @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "product_images_ibfk_1")

  @@index([display_order], map: "idx_display_order")
  @@index([product_id], map: "idx_product_id")
  @@map("product_images")
}

model Order {
  id                   String                 @id @default(dbgenerated("(uuid())")) @db.VarChar(36)
  order_number         String                 @unique(map: "order_number") @db.VarChar(50)
  user_id              String?                @db.VarChar(36)
  status               orders_status?         @default(pending)
  payment_status       orders_payment_status? @default(pending)
  payment_method       orders_payment_method
  payment_id           String?                @db.VarChar(255)
  transaction_id       String?                @db.VarChar(255)
  subtotal             Decimal                @db.Decimal(10, 2)
  shipping_cost        Decimal?               @default(0.00) @db.Decimal(10, 2)
  tax_amount           Decimal?               @default(0.00) @db.Decimal(10, 2)
  discount_amount      Decimal?               @default(0.00) @db.Decimal(10, 2)
  total_amount         Decimal                @db.Decimal(10, 2)
  currency             String?                @default("INR") @db.VarChar(3)
  shipping_address     String                 @db.LongText
  billing_address      String?                @db.LongText
  shipping_method      String?                @db.VarChar(100)
  tracking_number      String?                @db.VarChar(255)
  estimated_delivery   DateTime?              @db.Date
  delivered_at         DateTime?              @db.DateTime(0)
  notes                String?                @db.Text
  admin_notes          String?                @db.Text
  created_at           DateTime?              @default(now()) @db.DateTime(0)
  updated_at           DateTime?              @default(now()) @db.DateTime(0)
  delivery_agent_name  String?                @db.VarChar(255)
  delivery_agent_phone String?                @db.VarChar(20)
  coupon_usage         coupon_usage[]
  order_items          OrderItem[]
  users                User?                  @relation(fields: [user_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "orders_ibfk_1")
  product_reviews      product_reviews[]
  returns              returns[]

  @@index([created_at], map: "idx_created_at")
  @@index([order_number], map: "idx_order_number")
  @@index([payment_status], map: "idx_payment_status")
  @@index([status], map: "idx_status")
  @@index([user_id], map: "idx_user_id")
  @@map("orders")
}

model OrderItem {
  id               String            @id @default(dbgenerated("(uuid())")) @db.VarChar(36)
  order_id         String            @db.VarChar(36)
  product_id       String            @db.VarChar(50)
  variant_id       String?           @db.VarChar(36)
  product_name     String            @db.VarChar(255)
  product_image    String?           @db.VarChar(500)
  price            Decimal           @db.Decimal(10, 2)
  quantity         Int
  total            Decimal           @db.Decimal(10, 2)
  created_at       DateTime?         @default(now()) @db.DateTime(0)
  orders           Order             @relation(fields: [order_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "order_items_ibfk_1")
  products         Product           @relation(fields: [product_id], references: [id], onUpdate: Restrict, map: "order_items_ibfk_2")
  product_variants product_variants? @relation(fields: [variant_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "order_items_ibfk_3")
  returns          returns[]

  @@index([order_id], map: "idx_order_id")
  @@index([product_id], map: "idx_product_id")
  @@index([variant_id], map: "variant_id")
  @@map("order_items")
}

model Banner {
  id               String    @id @default(dbgenerated("(uuid())")) @db.VarChar(36)
  title_en         String    @db.VarChar(255)
  title_hi         String    @db.VarChar(255)
  subtitle_en      String?   @db.VarChar(255)
  subtitle_hi      String?   @db.VarChar(255)
  description_en   String?   @db.Text
  description_hi   String?   @db.Text
  image_desktop    String    @db.VarChar(500)
  image_mobile     String?   @db.VarChar(500)
  link_url         String?   @db.VarChar(500)
  link_text_en     String?   @db.VarChar(100)
  link_text_hi     String?   @db.VarChar(100)
  background_color String?   @default("#ffffff") @db.VarChar(7)
  text_color       String?   @default("#000000") @db.VarChar(7)
  button_color     String?   @default("#f59e0b") @db.VarChar(7)
  display_order    Int?      @default(0)
  is_active        Boolean?  @default(true)
  start_date       DateTime? @db.DateTime(0)
  end_date         DateTime? @db.DateTime(0)
  created_at       DateTime? @default(now()) @db.DateTime(0)
  updated_at       DateTime? @default(now()) @db.DateTime(0)

  @@index([display_order], map: "idx_display_order")
  @@index([end_date], map: "idx_end_date")
  @@index([is_active], map: "idx_is_active")
  @@index([start_date], map: "idx_start_date")
  @@map("banners")
}

model Coupon {
  id                      String         @id @default(dbgenerated("(uuid())")) @db.VarChar(36)
  code                    String         @unique(map: "code") @db.VarChar(50)
  title                   String         @db.VarChar(255)
  description             String?        @db.Text
  type                    coupons_type
  value                   Decimal        @db.Decimal(10, 2)
  minimum_order_amount    Decimal?       @default(0.00) @db.Decimal(10, 2)
  maximum_discount_amount Decimal?       @db.Decimal(10, 2)
  usage_limit             Int?
  usage_count             Int?           @default(0)
  user_usage_limit        Int?           @default(1)
  valid_from              DateTime       @db.DateTime(0)
  valid_until             DateTime       @db.DateTime(0)
  applicable_categories   String?        @db.LongText
  applicable_products     String?        @db.LongText
  is_active               Boolean?       @default(true)
  created_at              DateTime?      @default(now()) @db.DateTime(0)
  updated_at              DateTime?      @default(now()) @db.DateTime(0)
  coupon_usage            coupon_usage[]

  @@index([code], map: "idx_code")
  @@index([is_active], map: "idx_is_active")
  @@index([valid_from], map: "idx_valid_from")
  @@index([valid_until], map: "idx_valid_until")
  @@map("coupons")
}

model Notification {
  id         String    @id @default(dbgenerated("(uuid())")) @db.VarChar(36)
  user_id    String?   @db.VarChar(36)
  type       String    @db.VarChar(100)
  title      String    @db.VarChar(255)
  message    String    @db.Text
  data       String?   @db.LongText
  read_at    DateTime? @db.DateTime(0)
  action_url String?   @db.VarChar(500)
  expires_at DateTime? @db.DateTime(0)
  created_at DateTime? @default(now()) @db.DateTime(0)
  users      User?     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "notifications_ibfk_1")

  @@index([created_at], map: "idx_created_at")
  @@index([read_at], map: "idx_read_at")
  @@index([type], map: "idx_type")
  @@index([user_id], map: "idx_user_id")
  @@map("notifications")
}

model audit_logs {
  id            String    @id @default(dbgenerated("(uuid())")) @db.VarChar(36)
  user_id       String?   @db.VarChar(36)
  action        String    @db.VarChar(100)
  resource_type String    @db.VarChar(100)
  resource_id   String?   @db.VarChar(255)
  old_values    String?   @db.LongText
  new_values    String?   @db.LongText
  ip_address    String?   @db.VarChar(45)
  user_agent    String?   @db.Text
  created_at    DateTime? @default(now()) @db.DateTime(0)
  users         User?     @relation(fields: [user_id], references: [id], onUpdate: Restrict, map: "audit_logs_ibfk_1")

  @@index([action], map: "idx_action")
  @@index([created_at], map: "idx_created_at")
  @@index([resource_type], map: "idx_resource_type")
  @@index([user_id], map: "idx_user_id")
}

model carts {
  id               String            @id @default(dbgenerated("(uuid())")) @db.VarChar(36)
  user_id          String            @db.VarChar(36)
  product_id       String            @db.VarChar(50)
  variant_id       String?           @db.VarChar(36)
  quantity         Int               @default(1)
  created_at       DateTime?         @default(now()) @db.DateTime(0)
  updated_at       DateTime?         @default(now()) @db.DateTime(0)
  users            User              @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "carts_ibfk_1")
  products         Product           @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "carts_ibfk_2")
  product_variants product_variants? @relation(fields: [variant_id], references: [id], onUpdate: Restrict, map: "carts_ibfk_3")

  @@unique([user_id, product_id, variant_id], map: "unique_cart_item")
  @@index([user_id], map: "idx_user_id")
  @@index([product_id], map: "product_id")
  @@index([variant_id], map: "variant_id")
}

model coupon_usage {
  id              String    @id @default(dbgenerated("(uuid())")) @db.VarChar(36)
  coupon_id       String    @db.VarChar(36)
  user_id         String?   @db.VarChar(36)
  order_id        String    @db.VarChar(36)
  discount_amount Decimal   @db.Decimal(10, 2)
  used_at         DateTime? @default(now()) @db.DateTime(0)
  coupons         Coupon    @relation(fields: [coupon_id], references: [id], onUpdate: Restrict, map: "coupon_usage_ibfk_1")
  users           User?     @relation(fields: [user_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "coupon_usage_ibfk_2")
  orders          Order     @relation(fields: [order_id], references: [id], onUpdate: Restrict, map: "coupon_usage_ibfk_3")

  @@index([coupon_id], map: "idx_coupon_id")
  @@index([user_id], map: "idx_user_id")
  @@index([order_id], map: "order_id")
}

model notification_templates {
  id         String                      @id @default(dbgenerated("(uuid())")) @db.VarChar(36)
  name       String                      @unique(map: "name") @db.VarChar(100)
  type       notification_templates_type
  subject    String?                     @db.VarChar(255)
  content    String                      @db.Text
  variables  String?                     @db.LongText
  is_active  Boolean?                    @default(true)
  created_at DateTime?                   @default(now()) @db.DateTime(0)
  updated_at DateTime?                   @default(now()) @db.DateTime(0)

  @@index([is_active], map: "idx_is_active")
  @@index([name], map: "idx_name")
  @@index([type], map: "idx_type")
}

model refresh_tokens {
  id          String    @id @default(dbgenerated("(uuid())")) @db.VarChar(36)
  user_id     String    @db.VarChar(36)
  token_hash  String    @db.VarChar(255)
  device_info String?   @db.Text
  ip_address  String?   @db.VarChar(45)
  expires_at  DateTime  @db.DateTime(0)
  revoked     Boolean?  @default(false)
  created_at  DateTime? @default(now()) @db.DateTime(0)
  users       User      @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "refresh_tokens_ibfk_1")

  @@index([expires_at], map: "idx_expires_at")
  @@index([token_hash], map: "idx_token_hash")
  @@index([user_id], map: "idx_user_id")
}

model seo_metadata {
  id              String    @id @default(dbgenerated("(uuid())")) @db.VarChar(36)
  page_type       String    @db.VarChar(100)
  resource_id     String    @db.VarChar(255)
  title           String?   @db.VarChar(255)
  description     String?   @db.Text
  keywords        String?   @db.Text
  og_title        String?   @db.VarChar(255)
  og_description  String?   @db.Text
  og_image        String?   @db.VarChar(500)
  canonical_url   String?   @db.VarChar(500)
  robots          String?   @default("index,follow") @db.VarChar(100)
  structured_data String?   @db.LongText
  created_at      DateTime? @default(now()) @db.DateTime(0)
  updated_at      DateTime? @default(now()) @db.DateTime(0)

  @@unique([page_type, resource_id], map: "unique_resource")
  @@index([page_type], map: "idx_page_type")
}

model site_settings {
  id            String    @id @default(dbgenerated("(uuid())")) @db.VarChar(36)
  key_name      String    @unique(map: "key_name") @db.VarChar(100)
  value_text    String?   @db.Text
  value_number  Decimal?  @db.Decimal(15, 2)
  value_boolean Boolean?
  value_json    String?   @db.LongText
  description   String?   @db.Text
  category      String?   @default("general") @db.VarChar(100)
  is_public     Boolean?  @default(false)
  created_at    DateTime? @default(now()) @db.DateTime(0)
  updated_at    DateTime? @default(now()) @db.DateTime(0)

  @@index([category], map: "idx_category")
  @@index([is_public], map: "idx_is_public")
  @@index([key_name], map: "idx_key_name")
}

model user_addresses {
  id            String                       @id @default(dbgenerated("(uuid())")) @db.VarChar(36)
  user_id       String                       @db.VarChar(36)
  full_name     String                       @db.VarChar(255)
  phone         String                       @db.VarChar(20)
  address_line1 String                       @db.VarChar(255)
  address_line2 String?                      @db.VarChar(255)
  city          String                       @db.VarChar(100)
  state         String                       @db.VarChar(100)
  pincode       String                       @db.VarChar(10)
  country       String?                      @default("India") @db.VarChar(100)
  address_type  user_addresses_address_type? @default(home)
  is_default    Boolean?                     @default(false)
  created_at    DateTime?                    @default(now()) @db.DateTime(0)
  updated_at    DateTime?                    @default(now()) @db.DateTime(0)
  users         User                         @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "user_addresses_ibfk_1")

  @@index([user_id], map: "idx_user_id")
}

model wishlists {
  id         String    @id @default(dbgenerated("(uuid())")) @db.VarChar(36)
  user_id    String    @db.VarChar(36)
  product_id String    @db.VarChar(50)
  created_at DateTime? @default(now()) @db.DateTime(0)
  users      User      @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "wishlists_ibfk_1")
  products   Product   @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "wishlists_ibfk_2")

  @@unique([user_id, product_id], map: "unique_wishlist_item")
  @@index([user_id], map: "idx_user_id")
  @@index([product_id], map: "product_id")
}

model product_reviews {
  id                String    @id @default(dbgenerated("(uuid())")) @db.VarChar(36)
  product_id        String    @db.VarChar(50)
  user_id           String?   @db.VarChar(36)
  order_id          String?   @db.VarChar(36)
  rating            Int
  title             String?   @db.VarChar(255)
  comment           String?   @db.Text
  images            String?   @db.LongText
  verified_purchase Boolean?  @default(false)
  helpful_count     Int?      @default(0)
  is_approved       Boolean?  @default(false)
  admin_response    String?   @db.Text
  created_at        DateTime? @default(now()) @db.DateTime(0)
  updated_at        DateTime? @default(now()) @db.DateTime(0)
  products          Product   @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "product_reviews_ibfk_1")
  users             User?     @relation(fields: [user_id], references: [id], onUpdate: Restrict, map: "product_reviews_ibfk_2")
  orders            Order?    @relation(fields: [order_id], references: [id], onUpdate: Restrict, map: "product_reviews_ibfk_3")

  @@index([is_approved], map: "idx_is_approved")
  @@index([product_id], map: "idx_product_id")
  @@index([rating], map: "idx_rating")
  @@index([user_id], map: "idx_user_id")
  @@index([order_id], map: "order_id")
}

model product_variants {
  id               String      @id @default(dbgenerated("(uuid())")) @db.VarChar(36)
  product_id       String      @db.VarChar(50)
  variant_type     String      @db.VarChar(50)
  variant_value    String      @db.VarChar(100)
  price_adjustment Decimal?    @default(0.00) @db.Decimal(10, 2)
  stock            Int?        @default(0)
  sku              String?     @db.VarChar(100)
  is_active        Boolean?    @default(true)
  created_at       DateTime?   @default(now()) @db.DateTime(0)
  updated_at       DateTime?   @default(now()) @db.DateTime(0)
  carts            carts[]
  order_items      OrderItem[]
  products         Product     @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "product_variants_ibfk_1")

  @@unique([product_id, variant_type, variant_value], map: "unique_variant")
  @@index([product_id], map: "idx_product_id")
  @@index([variant_type], map: "idx_variant_type")
}

model returns {
  id            String                 @id @default(dbgenerated("(uuid())")) @db.VarChar(36)
  order_id      String                 @db.VarChar(36)
  order_item_id String                 @db.VarChar(36)
  user_id       String                 @db.VarChar(36)
  reason        String                 @db.VarChar(255)
  description   String?                @db.Text
  images        String?                @db.LongText
  status        returns_status?        @default(requested)
  refund_amount Decimal?               @db.Decimal(10, 2)
  refund_method returns_refund_method? @default(original)
  admin_notes   String?                @db.Text
  collected_at  DateTime?              @db.DateTime(0)
  refunded_at   DateTime?              @db.DateTime(0)
  created_at    DateTime?              @default(now()) @db.DateTime(0)
  updated_at    DateTime?              @default(now()) @db.DateTime(0)
  orders        Order                  @relation(fields: [order_id], references: [id], onUpdate: Restrict, map: "returns_ibfk_1")
  order_items   OrderItem              @relation(fields: [order_item_id], references: [id], onUpdate: Restrict, map: "returns_ibfk_2")
  users         User                   @relation(fields: [user_id], references: [id], onUpdate: Restrict, map: "returns_ibfk_3")

  @@index([order_id], map: "idx_order_id")
  @@index([status], map: "idx_status")
  @@index([user_id], map: "idx_user_id")
  @@index([order_item_id], map: "order_item_id")
}

model contact_requests {
  id         String    @id @db.VarChar(50)
  name       String    @db.VarChar(255)
  email      String    @db.VarChar(255)
  subject    String?   @db.VarChar(255)
  message    String?   @db.Text
  created_at DateTime? @default(now()) @db.DateTime(0)
  updated_at DateTime? @default(now()) @db.DateTime(0)
}

model sell_requests {
  id            String    @id @db.VarChar(50)
  name          String    @db.VarChar(255)
  email         String    @db.VarChar(255)
  phone         String?   @db.VarChar(20)
  business_name String?   @db.VarChar(255)
  business_type String?   @db.VarChar(100)
  products      String?   @db.Text
  message       String?   @db.Text
  created_at    DateTime? @default(now()) @db.DateTime(0)
  updated_at    DateTime? @default(now()) @db.DateTime(0)
}

enum notification_templates_type {
  email
  sms
  push
  in_app
}

enum orders_status {
  pending
  confirmed
  processing
  shipped
  out_for_delivery
  delivered
  cancelled
  returned
  refunded
}

enum coupons_type {
  percentage
  fixed
  free_shipping
}

enum orders_payment_status {
  pending
  paid
  failed
  refunded
  partial_refund
}

enum orders_payment_method {
  cod
  online
  upi
  card
  netbanking
  wallet
}

enum users_role {
  super_admin
  admin
  manager
  support
  artisan
  customer
}

enum user_addresses_address_type {
  home
  work
  other
}

enum returns_status {
  requested
  approved
  rejected
  collected
  refunded
}

enum returns_refund_method {
  original
  bank
  upi
  cash
}
